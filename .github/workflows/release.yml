name: release

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  build-repos-zip:
    name: upload repos.zip
    runs-on: ubuntu-latest
    steps:
      - name: install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.0'

      - name: checkout
        uses: actions/checkout@v2

      - name: build repos.zip
        run: make repos.zip

      - name: show structure of repos.zip
        run: unzip -l repos.zip

      - name: upload repos.zip
        uses: actions/upload-artifact@v2
        with:
          name: repos.zip
          path: repos.zip

  build-rust-parser:
    name: target = ${{ matrix.build.target }}
    needs: ['build-repos-zip']
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - { os: ubuntu-latest,  features: jemallocator,            target: x86_64-unknown-linux-gnu }
          - { os: macos-latest,   features: jemallocator,            target: x86_64-apple-darwin }
          - { os: windows-latest,                         exe: .exe, target: x86_64-pc-windows-msvc }
          - { os: windows-latest,                         exe: .exe, target: x86_64-pc-windows-gnu }
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download repos
        uses: actions/download-artifact@v2
        with:
          name: repos.zip

      - name: unzip repos
        run: unzip repos.zip

      - name: setup msvc on windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true

      - name: build parser
        env:
          TARGET: ${{ matrix.build.target }}
          CARGOFLAGS: --release --features=${{ matrix.build.features }}
          BUILD_ENV: release
        run: make rust-parser

      - name: test rust-parser
        env:
          FILELIST_PATH: filelist
        run: ./rust-parser

      - name: give rust-parser representative name
        run: cp rust-parser${{ matrix.build.exe }} rust-parser-${{ matrix.build.target }}${{ matrix.build.exe }}

      - name: upload rust-parser-${{ matrix.build.target }}${{ matrix.build.exe }}
        uses: actions/upload-artifact@v2
        with:
          name: rust-parser-${{ matrix.build.target }}${{ matrix.build.exe }}
          path: rust-parser-${{ matrix.build.target }}${{ matrix.build.exe }}

  make-release:
    name: release
    needs:
      - 'build-repos-zip'
      - 'build-rust-parser'
    runs-on: ubuntu-latest
    steps:
      - name: download rust-parser-x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v2
        with:
          name: rust-parser-x86_64-unknown-linux-gnu

      - name: download rust-parser-x86_64-apple-darwin
        uses: actions/download-artifact@v2
        with:
          name: rust-parser-x86_64-apple-darwin

      - name: download rust-parser-x86_64-pc-windows-msvc.exe
        uses: actions/download-artifact@v2
        with:
          name: rust-parser-x86_64-pc-windows-msvc.exe

      - name: download rust-parser-x86_64-pc-windows-gnu.exe
        uses: actions/download-artifact@v2
        with:
          name: rust-parser-x86_64-pc-windows-gnu.exe

      - name: download repos.zip
        uses: actions/download-artifact@v2
        with:
          name: repos.zip

      - name: release
        uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          artifacts: "rust-parser-*,repos.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
